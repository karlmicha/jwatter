#summary Installing and using JWatter
#labels Featured

= Installation and configuration =

System requirements:
 * Java 5 or higher
 * Firefox 2.0 or higher
 * MSIE will be supported in the future

The code is organized as follows:
 * build: ant build directory
 * lib: third party software
 * scripts: Unix shell scripts and Windows batch scripts for various tools
 * resources: toolkit resources (e.g. properties file)
 * src/java: framework and toolkit sources
 * tests/java: framework and toolkit tests
 * tests/resources: resources for tests (properties files, local test pages)

Get the following third party jar files and place them in subdirectories inside the lib directory:
 * [http://junit.org/ JUnit]
 * [http://seleniumhq.org/ Selenium 2 Java bindings]
 * [http://watij.com/ Watij]
If not using Eclipse, run
{{{
ant zip
}}}
This should build the web automation framework and the toolkit, run some unit tests and create a zip file with the jwatter jar and the scripts. The zip file is created in `build/zips`.

To see if your setup is working, you can run some browser tests. Edit the file `tests/resources/tests.properties`, search for the string _file:///_ and adjust the URL path to point to your `tests/resources` directory. Then type:
{{{
ant run-browser-tests
}}}
These tests start up a web browser and use the HTML files in `tests/resources`.

If you use Eclipse, run `ant eclipse` to create the classpath and project files. Then create a new project from existing sources in Eclipse. You can run the framework tests as unit tests in Eclipse.

To use the web automation toolkit, adjust the settings in `resources/toolkit.properties` to your needs. Close all Firefox windows (note: currently the toolkit uses Firefox only, but this will change in future versions). Then run the command
{{{
./scripts/webtoolkit
}}}
This is a Unix shell script. On Windows, use Cygwin. The toolkit starts a new Firefox browser and loads the URL that is configured in the toolkit properties file. At the toolkit prompt, type *h* or *help* to see a list of the available commands. You can use Firefox to navigate to any page. To exit the toolkit, type *q* or *quit*. This will close Firefox.

To use a different Firefox profile than your default profile, first create the profile by running `firefox -P`, then set the `org.jwatter.toolkit.Toolkit.browserProfileName` in the `resources/toolkit.properties` file to the name of the profile. If you leave this property blank, the web toolkit will start Firefox with the default profile.

= Writing tests =

Create automated tests for your web application:
 # Make sure your web server is running and serving your application.
 # Create an Eclipse Java project for your automated tests and add the jwatter jar file and the third party jar files to the build path.
 # Edit `resources/toolkit.properties`:
  * Set `org.jwatter.toolkit.Toolkit.startupUrl` to the entry URL of your web application.
  * Set `org.jwatter.toolkit.Toolkit.outputDir` to the Java source folder in your Eclipse project.
  * Set `org.jwatter.toolkit.Toolkit.basePackageName` to the package name that you want to use for your test classes, for example `com.myapp.webtests`.
  * Set `org.jwatter.toolkit.Toolkit.actorPropertiesFile` to the properties filename that you want to use for test properties.
 # Make sure you have no Firefox windows open.
 # Start the web automation toolkit. The toolkit brings up a new Firefox window with the start page of your web application.
 # If necessary, log in to your web application (unless you are writing tests for the login page).
 # Navigate to the page you want to automate.
 # Type the following command in the toolkit command prompt: *generate MyPage* (replace *MyPage* with an appropriate name for the page).
 # Refresh your Eclipse project. You should now see three new classes in your Java source folder: `com/myapp/webtests/pages/actor/MyPageActor.java`, `com/myapp/webtests/pages/MyPage.java`, and `com/myapp/webtests/tests/MyPageTest.java`.
 # Add methods to the `MyPage` class as required by your tests (see LevelsOfAbstraction).
 # Add test methods to the `MyPageTest` (see LevelsOfAbstraction).

= Troubleshooting =

Q: When I run a test, Firefox displays a warning about an invalid certificate.

A: Your web application uses HTTPS, and the server certificate cannot be verified (maybe it is self signed) or it does not match the hostname. You can add a security exception:
 # Start Firefox (if you specified a browser profile in `toolkit.properties`, start firefox with that profile: `firefox -P profilename`).
 # Point it to the URL that causes the certificate exception.
 # Accept the certificate and add a permanent security exception.
 # Close Firefox.

Q: I get `org.openqa.selenium.WebDriverException: Failed to connect to binary FirefoxBinary`.

A: This happens mostly on Windows systems with slow filesystems and is caused when a new Firefox process is created immediately after another Firefox process has just terminated, and the new process is still seeing the old process. The solution is to wrap a batch script around the Firefox binary that sleeps for a couple of seconds after Firefox has terminated.
 * When running tests with ant, uncomment a line in `build/include/macros.xml` (search for webdriver).
 * When running tests in eclipse, add a JVM argument `-Dwebdriver.firefox.bin=scripts/webdriver_firefox_wrapper.bat` in the run configuration.
 * For the web automation toolkit, uncomment a line in `scripts/webtoolkit.bat`.
